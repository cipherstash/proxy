services:
  postgres: &postgres
    image: postgres:latest
    container_name: postgres
    environment:
      PGPORT: 5532
    ports:
      - 5532:5532
    volumes:
      - ./pg/data-latest:/var/lib/postgresql/data
    env_file:
      - ./pg/common.env
    networks:
      - postgres
    deploy:
      resources:
        limits:
          cpus: "${CPU_LIMIT:-2}"
          memory: 2048mb
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10

  postgres-17-tls:
    <<: *postgres
    image: postgres:17
    container_name: postgres-17-tls
    environment:
      PGPORT: 5617
    ports:
      - 5617:5617
    command: |
      sh -c 'chown postgres:postgres /etc/postgresql/localhost*.pem && chmod 0600 /etc/postgresql/localhost*.pem && exec docker-entrypoint.sh -c ssl=on -c ssl_cert_file=/etc/postgresql/localhost.pem -c ssl_key_file=/etc/postgresql/localhost-key.pem -c hba_file=/etc/postgresql/pg_hba.conf'
    volumes:
      - ./pg/pg_hba-tls.conf:/etc/postgresql/pg_hba.conf
      - ./tls/localhost-key.pem:/etc/postgresql/localhost-key.pem
      - ./tls/localhost.pem:/etc/postgresql/localhost.pem
      - ./pg/data-17:/var/lib/postgresql/data

  proxy:
    image: cipherstash/proxy:latest
    container_name: proxy
    ports:
      - 6432:6432
    environment:
      - CS_DATABASE__NAME=${CS_DATABASE__NAME}
      - CS_DATABASE__USERNAME=${CS_DATABASE__USERNAME}
      - CS_DATABASE__PASSWORD=${CS_DATABASE__PASSWORD}
      - CS_DATABASE__HOST=${CS_DATABASE__HOST}
      - CS_DATABASE__PORT=${CS_DATABASE__PORT}
      - CS_AUTH__WORKSPACE_ID=${CS_AUTH__WORKSPACE_ID}
      - CS_AUTH__CLIENT_ACCESS_KEY=${CS_AUTH__CLIENT_ACCESS_KEY}
      - CS_ENCRYPT__DATASET_ID=${CS_ENCRYPT__DATASET_ID}
      - CS_ENCRYPT__CLIENT_KEY=${CS_ENCRYPT__CLIENT_KEY}
      - CS_ENCRYPT__CLIENT_ID=${CS_ENCRYPT__CLIENT_ID}
    networks:
      - postgres

  proxy-tls:
    image: cipherstash/proxy:latest
    container_name: proxy
    ports:
      - 6432:6432
    environment:
      - CS_DATABASE__NAME=${CS_DATABASE__NAME}
      - CS_DATABASE__USERNAME=${CS_DATABASE__USERNAME}
      - CS_DATABASE__PASSWORD=${CS_DATABASE__PASSWORD}
      - CS_DATABASE__HOST=${CS_DATABASE__HOST}
      - CS_DATABASE__PORT=${CS_DATABASE__PORT}
      - CS_AUTH__WORKSPACE_ID=${CS_AUTH__WORKSPACE_ID}
      - CS_AUTH__CLIENT_ACCESS_KEY=${CS_AUTH__CLIENT_ACCESS_KEY}
      - CS_ENCRYPT__DATASET_ID=${CS_ENCRYPT__DATASET_ID}
      - CS_ENCRYPT__CLIENT_KEY=${CS_ENCRYPT__CLIENT_KEY}
      - CS_ENCRYPT__CLIENT_ID=${CS_ENCRYPT__CLIENT_ID}
      # TLS is set to use paths under /etc if no environment variable is set. Comment these out to load from toml
      - CS_TLS__TYPE=${CS_TLS__TYPE:-Path}
      - CS_TLS__CERTIFICATE=${CS_TLS__CERTIFICATE:-/etc/cipherstash-proxy/server.cert}
      - CS_TLS__PRIVATE_KEY=${CS_TLS__PRIVATE_KEY:-/etc/cipherstash-proxy/server.key}
      - CS_SERVER__REQUIRE_TLS=true

    volumes:
      - ./tls/server.cert:/etc/cipherstash-proxy/server.cert
      - ./tls/server.key:/etc/cipherstash-proxy/server.key
    networks:
      - postgres

  python:
    image: test/python
    build:
      context: ./python
      dockerfile: Dockerfile
      target: test
    container_name: python-tests
    environment:
      - CS_DATABASE__NAME=${CS_DATABASE__NAME}
      - CS_DATABASE__USERNAME=${CS_DATABASE__USERNAME}
      - CS_DATABASE__PASSWORD=${CS_DATABASE__PASSWORD}
      - CS_DATABASE__HOST=proxy-tls
      - CS_DATABASE__PORT=6432
    networks:
      - postgres


networks:
  postgres:
    driver: bridge

