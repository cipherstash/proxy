# Builds and pushes the proxy docker image to the AWS Marketplace ECR
#
# here: https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
#
#
# ECR is a private registry that is not controlled by us
# Most of the existing Docker actions are not compatible with ECR, so some of this is quite manual
#
# Builds for different images are handled using tags, because I could not get other things workings.
#
# The tag formats are:
#   - proxy-{os}-{arch}-{release-tag}
#   - proxy-{os}-{arch}-build-{timestamp}
#
# ECR is immutable - so test builds need a timestamp or they fail with a conflicts

name: "Proxy ‚Äî Build & Push Proxy Docker Image for AWS Marketplace"

on:
  release:
    types:
      - published
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/release-aws-marketplace.yml

  workflow_dispatch:


env:
  REGISTRY_IMAGE: cipherstash/cipherstash
  AWS_REGION: us-east-1

jobs:
  build:
    name: üèóÔ∏è Build binaries + Docker images
    permissions:
        contents: read
        packages: write
        id-token: write # This is required for requesting the JWT
    strategy:
      fail-fast: false
      matrix:
        build:
          - { os: linux-arm64-public, arch: linux/arm64, tag: linux-arm64, cache-provider: github }
    runs-on: ${{matrix.build.os}}
    steps:
      # print OIDC claim
      - name: print oidc token claims
        run: |
            IDTOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json"  | jq -r '.value[].sub')
            jwtd() {
              if [[ -x $(command -v jq) ]]; then
                  jq -R 'split(".") | .[1] | @base64d | fromjson' <<< "${1}" > jwt_claims.json
                  cat jwt_claims.json
                  echo ${{ env.ACTIONS_ID_TOKEN_REQUEST_URL}}
              fi
            }
            jwtd $IDTOKEN

      - name: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        if: ${{ matrix.build.arch == 'linux/arm64' }}
        with:
            version: 2                         # default
            verbose: false                     # default
            arch: arm64                        # allowed values: amd64, arm64
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_MARKETPLACE_IAM_ROLE }}
          aws-region: us-east-1

      - name: Log in to AWS Marketplace ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ vars.AWS_MARKETPLACE_ECR_ID }}

      - uses: actions/checkout@v4

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-provider: ${{matrix.build.cache-provider}}
          cache-all-crates: true

      - uses: jdx/mise-action@v2
        with:
          version: 2025.1.6 # [default: latest] mise version to install
          install: true # [default: true] run `mise install`
          cache: true # [default: true] cache mise using GitHub's cache

      - run: |
          mise run build --platform ${{matrix.build.arch}}

      - uses: actions/upload-artifact@v4
        with:
          name: cipherstash-proxy-${{matrix.build.tag}}
          path: cipherstash-proxy

      - if: github.event_name != 'pull_request'
        name: Release to AWS
        env:
          AWS_MARKETPLACE_ECR_REPOSITORY: ${{ vars.AWS_MARKETPLACE_ECR_REPOSITORY }}
          BUILD_TAG: ${{ matrix.build.tag }}
          RELEASE_TAG: ${{ github.event.release.tag_name }}
        run: |
          mise run release:aws-marketplace


